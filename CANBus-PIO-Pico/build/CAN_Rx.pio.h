// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// CAN_Rx //
// ------ //

#define CAN_Rx_wrap_target 0
#define CAN_Rx_wrap 27

static const uint16_t CAN_Rx_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0                   
    0xe03f, //  1: set    x, 31                      
    0xae42, //  2: nop                           [14]
    0x4001, //  3: in     pins, 1                    
    0x0e43, //  4: jmp    x--, 3                 [14]
    0xe03f, //  5: set    x, 31                      
    0x0007, //  6: jmp    7                          
    0x4001, //  7: in     pins, 1                    
    0x0e47, //  8: jmp    x--, 7                 [14]
    0xe03f, //  9: set    x, 31                      
    0x000b, // 10: jmp    11                         
    0x4001, // 11: in     pins, 1                    
    0x0e4b, // 12: jmp    x--, 11                [14]
    0xe03f, // 13: set    x, 31                      
    0x000f, // 14: jmp    15                         
    0x4001, // 15: in     pins, 1                    
    0x0e4f, // 16: jmp    x--, 15                [14]
    0xbf42, // 17: nop                           [31]
    0xbf42, // 18: nop                           [31]
    0xbf42, // 19: nop                           [31]
    0xbf42, // 20: nop                           [31]
    0xbf42, // 21: nop                           [31]
    0xbf42, // 22: nop                           [31]
    0xbf42, // 23: nop                           [31]
    0xbf42, // 24: nop                           [31]
    0xbf42, // 25: nop                           [31]
    0xbf42, // 26: nop                           [31]
    0xbf42, // 27: nop                           [31]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program CAN_Rx_program = {
    .instructions = CAN_Rx_program_instructions,
    .length = 28,
    .origin = -1,
};

static inline pio_sm_config CAN_Rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + CAN_Rx_wrap_target, offset + CAN_Rx_wrap);
    return c;
}
#endif

// ------ //
// CAN_TX //
// ------ //

#define CAN_TX_wrap_target 0
#define CAN_TX_wrap 20

static const uint16_t CAN_TX_program_instructions[] = {
            //     .wrap_target
    0x9fa0, //  0: pull   block           side 1 [7] 
    0xf73f, //  1: set    x, 31           side 0 [7] 
    0xa742, //  2: nop                           [7] 
    0x6001, //  3: out    pins, 1                    
    0xa642, //  4: nop                           [6] 
    0x0743, //  5: jmp    x--, 3                 [7] 
    0xe03f, //  6: set    x, 31                      
    0x0008, //  7: jmp    8                          
    0x6001, //  8: out    pins, 1                    
    0xa642, //  9: nop                           [6] 
    0x0748, // 10: jmp    x--, 8                 [7] 
    0xe03f, // 11: set    x, 31                      
    0x000d, // 12: jmp    13                         
    0x6001, // 13: out    pins, 1                    
    0xa642, // 14: nop                           [6] 
    0x074d, // 15: jmp    x--, 13                [7] 
    0xe03f, // 16: set    x, 31                      
    0x0012, // 17: jmp    18                         
    0x6001, // 18: out    pins, 1                    
    0xa642, // 19: nop                           [6] 
    0x0752, // 20: jmp    x--, 18                [7] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program CAN_TX_program = {
    .instructions = CAN_TX_program_instructions,
    .length = 21,
    .origin = -1,
};

static inline pio_sm_config CAN_TX_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + CAN_TX_wrap_target, offset + CAN_TX_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

    #include "hardware/clocks.h"
    #include "hardware/gpio.h"
    static inline void CAN_Rx_program_init(PIO pio, uint sm, uint offset, uint pin_rx ,uint baud)
    {
    pio_sm_set_consecutive_pindirs(pio, sm, pin_rx, 1, false);
    pio_gpio_init(pio, pin_rx);
    gpio_pull_up(pin_rx);
    pio_sm_config c = CAN_Rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin_rx); // for WAIT, IN
    // Shift to right, autopush enabled
    sm_config_set_in_shift(&c, false, true,1);
    //sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX); 
    //enable autopush
    // SM transmits 1 bit per 16 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / ( baud * 16 );
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true); 
    }
     static inline void CAN_TX_program_init(PIO pio, uint sm, uint offset, uint pin_tx ,uint baud)
     {
    pio_sm_set_pins_with_mask(pio, sm, 1u << pin_tx, 1u << pin_tx);
    pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin_tx, 1u << pin_tx);
    pio_gpio_init(pio, pin_tx);
    pio_sm_config c = CAN_TX_program_get_default_config(offset);
    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, false, true, 32);
    // We are mapping both OUT and side-set to the same pin, because sometimes
    // we need to assert user data onto the pin (with OUT) and sometimes
    // assert constant values (start/stop bit)
    sm_config_set_out_pins(&c, pin_tx, 1);
    sm_config_set_sideset_pins(&c, pin_tx);
    // We only need TX, so get an 8-deep FIFO!
   // sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (16 * baud);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
     }

#endif

